version: '3.8'

services:
  db:
    image: postgres:13-alpine
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432:5432

  redis:
    image: redis:latest
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis-data:/var/lib/redis/data

  app:
    build:
      context: .
    restart: always
    volumes:
      - static-data:/vol/web
    env_file:
      - .env
    depends_on:
      - db
      - redis

  celery_worker:
    build:
      context: .
    command: ["celery", "-A", "keibo", "worker", "--loglevel=info"]
    depends_on:
      - redis
      - db
    env_file:
      - .env

  celery_beat:
    build:
      context: .
    command: ["celery", "-A", "keibo", "beat", "-l", "info", "--scheduler", "django", "--loglevel=info"]
    depends_on:
      - redis
      - db
    env_file:
      - .env
        
  proxy:
    build:
      context: ./docker/proxy
    restart: always
    depends_on:
      - app
    ports:
      - 80:80
      - 443:443
    volumes:
      - static-data:/vol/static
      - certbot-web:/vol/www
      - proxy-dhparams:/vol/proxy
      - certbot-certs:/etc/letsencrypt
    environment:
      - DOMAIN=${DOMAIN}

  certbot:
    build:
      context: ./docker/certbot
    command: echo "Skipping..."
    volumes:
      - certbot-web:/vol/www
      - certbot-certs:/etc/letsencrypt
    depends_on:
      - proxy
    environment:
      - EMAIL=${ACME_DEFAULT_EMAIL}
      - DOMAIN=${DOMAIN}

volumes:
  proxy-dhparams:
  certbot-web:
  certbot-certs:
  postgres-data:
  redis-data:
  static-data: